
import React, { useState } from "react";
import { FileText, Download, Users, MessageSquare, Building2, FileBarChart, CheckCircle, Star, BarChart3, Loader2 } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import { useReports, useReportsStats, useReportCategories, GeneratedReport } from "@/hooks/useReports";
import { llmService } from "@/services/llm-service";
import { supabase } from "@/integrations/supabase/client";
import { toast } from "sonner";

const Reports = () => {
  const [activeTab, setActiveTab] = useState("generation");
  const [generatingReport, setGeneratingReport] = useState<string | null>(null);
  const { data: reports, isLoading: reportsLoading, refetch: refetchReports } = useReports();
  const { data: statsData, isLoading: statsLoading, refetch: refetchStats } = useReportsStats();
  const { data: categories } = useReportCategories();

  const formatFileSize = (bytes: number | null) => {
    if (!bytes) return "Pending";
    const mb = bytes / (1024 * 1024);
    return `${mb.toFixed(1)} MB`;
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString();
  };

  const downloadReport = async (report: GeneratedReport) => {
    try {
      toast.info('Downloading report...');
      
      // Generate a simplified report content for download
      const reportContent = `# ${report.report_name}

Generated on: ${new Date().toLocaleDateString()}
Category: ${report.report_categories?.title || 'Unknown Category'}

## Report Summary

This is the ${report.report_name} report generated from the Academic Navigator system.

Report ID: ${report.id}
Status: ${report.status}
Created: ${new Date(report.created_at).toLocaleDateString()}

---

*Report generated by Academic Navigator AI System*
      `;
      
      // Create and download the file as markdown
      const blob = new Blob([reportContent], { type: 'text/markdown' });
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `${report.report_name.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.md`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);
      
      // Update download count with proper error handling
      const { error: updateError } = await supabase
        .from('generated_reports')
        .update({ 
          download_count: (report.download_count || 0) + 1,
          file_size_bytes: blob.size
        })
        .eq('id', report.id);
      
      if (updateError) {
        console.error('Error updating download count:', updateError);
        toast.error('Failed to update download counter');
      } else {
        // Force refresh the reports list to show updated download count
        await refetchReports();
        toast.success('Report downloaded successfully!');
      }
    } catch (error) {
      console.error('Error downloading report:', error);
      toast.error('Failed to download report. Please try again.');
    }
  };


  const fetchAnalysisDataForReport = async () => {
    const { data: feedbackData } = await supabase
      .from('feedback')
      .select(`
        *,
        course_offerings (
          *,
          courses (*),
          lecturers (*)
        )
      `)
      .order('created_at', { ascending: false })
      .limit(1000);
    
    const { data: lecturerData } = await supabase
      .from('lecturers')
      .select('*')
      .eq('is_active', true);
    
    const { data: courseData } = await supabase
      .from('courses')
      .select('*')
      .eq('is_active', true);
    
    return {
      feedbackData: feedbackData || [],
      lecturerData: lecturerData || [],
      courseData: courseData || [],
      dateRange: {
        startDate: new Date(Date.now() - 6 * 30 * 24 * 60 * 60 * 1000).toISOString(),
        endDate: new Date().toISOString()
      }
    };
  };

  const generateReport = async (reportName: string, categoryId: number) => {
    try {
      setGeneratingReport(reportName);
      toast.info(`🤖 Generating "${reportName}" using AI analytics...`);
      
      const reportContent = await llmService.generateReport({
        reportType: reportName,
        categoryId: categoryId,
        parameters: {
          includeCharts: true,
          detailLevel: 'comprehensive'
        }
      });
      
      toast.success(`✅ "${reportName}" has been generated successfully!`);
      
      // Auto-download the generated report
      const blob = new Blob([reportContent], { type: 'text/markdown' });
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `${reportName.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.md`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);
      
      // Refresh the reports list and stats
      await Promise.all([refetchReports(), refetchStats()]);
      
      // Switch to recent reports tab to show the new report
      setActiveTab("recent");
      
    } catch (error) {
      console.error('Error generating report:', error);
      toast.error(`❌ Failed to generate "${reportName}". Please try again.`);
    } finally {
      setGeneratingReport(null);
    }
  };

  // Map categories to report templates with proper icon handling
  const getReportsByCategory = () => {
    if (!categories) return [];
    
    return categories.map(category => {
      const iconMap: Record<string, string> = {
        'Overall Lecturer Performance Report': 'Star',
        'Teaching Quality Assessment': 'Star',
        'Department Performance Overview': 'Building2',
        'Department Performance Forecasting Report': 'Building2',
        'Comprehensive Feedback Analysis': 'MessageSquare',
        'Sentiment Trends Report & Interpretation': 'MessageSquare',
        'Student Performance Analysis': 'Users',
        'Student Satisfaction Analysis Report': 'Users'
      };
      
      const colorMap: Record<string, string> = {
        'Overall Lecturer Performance Report': 'hsl(var(--chart-2))',
        'Teaching Quality Assessment': 'hsl(var(--chart-2))',
        'Department Performance Overview': 'hsl(var(--chart-4))',
        'Department Performance Forecasting Report': 'hsl(var(--chart-4))',
        'Comprehensive Feedback Analysis': 'hsl(var(--chart-3))',
        'Sentiment Trends Report & Interpretation': 'hsl(var(--chart-3))',
        'Student Performance Analysis': 'hsl(var(--chart-1))',
        'Student Satisfaction Analysis Report': 'hsl(var(--chart-1))'
      };
      
      return {
        id: category.id,
        name: category.title,
        icon: iconMap[category.title] || 'FileText',
        color: colorMap[category.title] || 'hsl(var(--chart-1))',
        description: category.description || '',
        reports: [{
          name: category.title,
          description: category.description || '',
          categoryId: category.id
        }]
      };
    });
  };

  const reportCategories = getReportsByCategory();

  return (
    <div className="space-y-8 max-w-7xl mx-auto">
      {/* Header */}
      <div className="space-y-3 text-center">
        <h1 className="text-4xl font-bold bg-gradient-to-r from-primary to-primary/70 bg-clip-text text-transparent">
          Reports & Analytics
        </h1>
        <p className="text-lg text-muted-foreground max-w-2xl mx-auto">
          Generate comprehensive insights and data-driven reports powered by AI analytics
        </p>
      </div>

      {/* Stats Dashboard */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card className="bg-gradient-to-br from-blue-500/10 to-blue-600/5 border-blue-200/20 dark:border-blue-800/20">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div className="space-y-2">
                <p className="text-sm font-medium text-muted-foreground">This Month</p>
                {statsLoading ? (
                  <div className="h-8 w-12 bg-muted rounded animate-pulse"></div>
                ) : (
                  <p className="text-3xl font-bold text-blue-600 dark:text-blue-400">{statsData?.thisMonthCount || 0}</p>
                )}
                <p className="text-xs text-muted-foreground">Reports Generated</p>
              </div>
              <div className="p-3 bg-blue-500/10 rounded-xl">
                <FileBarChart className="w-6 h-6 text-blue-600 dark:text-blue-400" />
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-green-500/10 to-green-600/5 border-green-200/20 dark:border-green-800/20">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div className="space-y-2">
                <p className="text-sm font-medium text-muted-foreground">Growth</p>
                {statsLoading ? (
                  <div className="h-8 w-12 bg-muted rounded animate-pulse"></div>
                ) : (
                  <p className="text-3xl font-bold text-green-600 dark:text-green-400">
                    {statsData?.difference && statsData.difference > 0 ? '+' : ''}{statsData?.difference || 0}
                  </p>
                )}
                <p className="text-xs text-muted-foreground">From Last Month</p>
              </div>
              <div className="p-3 bg-green-500/10 rounded-xl">
                <BarChart3 className="w-6 h-6 text-green-600 dark:text-green-400" />
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-purple-500/10 to-purple-600/5 border-purple-200/20 dark:border-purple-800/20">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div className="space-y-2">
                <p className="text-sm font-medium text-muted-foreground">Total Reports</p>
                {reportsLoading ? (
                  <div className="h-8 w-12 bg-muted rounded animate-pulse"></div>
                ) : (
                  <p className="text-3xl font-bold text-purple-600 dark:text-purple-400">{reports?.length || 0}</p>
                )}
                <p className="text-xs text-muted-foreground">All Time</p>
              </div>
              <div className="p-3 bg-purple-500/10 rounded-xl">
                <FileText className="w-6 h-6 text-purple-600 dark:text-purple-400" />
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Main Content with Tabs */}
      <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-8">
        <div className="flex justify-center">
          <TabsList className="grid w-full grid-cols-2 max-w-md h-12 bg-muted/50 rounded-xl p-1">
            <TabsTrigger value="generation" className="rounded-lg font-medium">
              <div className="flex items-center gap-2">
                <Download className="w-4 h-4" />
                AI Generation
              </div>
            </TabsTrigger>
            <TabsTrigger value="recent" className="rounded-lg font-medium">
              <div className="flex items-center gap-2">
                <FileText className="w-4 h-4" />
                My Reports
              </div>
            </TabsTrigger>
          </TabsList>
        </div>

        {/* Report Generation Tab */}
        <TabsContent value="generation" className="space-y-8">
          <div className="text-center space-y-4">
            <h2 className="text-2xl font-semibold text-foreground">Generate AI-Powered Reports</h2>
            <p className="text-muted-foreground max-w-2xl mx-auto">
              Choose from our comprehensive report categories below. Each report is generated using advanced AI analytics and automatically downloaded upon completion.
            </p>
          </div>
          
          {/* Organized by Categories */}
          <div className="space-y-12">
            {reportCategories.map((category) => (
              <div key={category.id} className="space-y-6">
                {/* Category Header */}
                <div className="flex items-center space-x-4 pb-4 border-b border-border/50">
                  <div 
                    className="p-3 rounded-xl shadow-md"
                    style={{ 
                      backgroundColor: category.color + '15',
                      border: `2px solid ${category.color}25`
                    }}
                  >
                    {category.icon === 'Users' && <Users className="w-6 h-6" style={{ color: category.color }} />}
                    {category.icon === 'Star' && <Star className="w-6 h-6" style={{ color: category.color }} />}
                    {category.icon === 'MessageSquare' && <MessageSquare className="w-6 h-6" style={{ color: category.color }} />}
                    {category.icon === 'Building2' && <Building2 className="w-6 h-6" style={{ color: category.color }} />}
                    {!['Users', 'Star', 'MessageSquare', 'Building2'].includes(category.icon) && 
                      <FileText className="w-6 h-6" style={{ color: category.color }} />}
                  </div>
                  <div>
                    <h3 className="text-xl font-bold text-foreground">{category.name}</h3>
                    <p className="text-sm text-muted-foreground">{category.description}</p>
                  </div>
                </div>
                
                {/* Reports in this category */}
                <div className="grid grid-cols-1 gap-4">
                  {category.reports.map((report, index) => (
                    <Card key={index} className="group hover:shadow-lg transition-all duration-300 border border-border/50 hover:border-primary/30">
                      <CardContent className="p-6">
                        <div className="flex items-center justify-between">
                          <div className="flex-1 space-y-2">
                            <h4 className="text-lg font-semibold text-foreground group-hover:text-primary transition-colors">
                              {report.name}
                            </h4>
                            <p className="text-sm text-muted-foreground leading-relaxed">
                              {report.description}
                            </p>
                          </div>
                          <Button 
                            size="lg" 
                            onClick={() => generateReport(report.name, report.categoryId)}
                            disabled={generatingReport === report.name}
                            className="flex items-center gap-3 ml-6 flex-shrink-0 shadow-md hover:shadow-lg transition-all duration-200"
                          >
                            {generatingReport === report.name ? (
                              <div className="flex items-center gap-2">
                                <div className="relative">
                                  <div className="w-4 h-4 border-2 border-white/20 border-t-white rounded-full animate-spin"></div>
                                </div>
                                Generating...
                              </div>
                            ) : (
                              <>
                                <Download className="w-4 h-4" />
                                Generate with AI
                              </>
                            )}
                          </Button>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </div>
            ))}
          </div>
        </TabsContent>

        {/* Recent Reports Tab */}
        <TabsContent value="recent" className="space-y-8">
          <div className="text-center space-y-4">
            <h2 className="text-2xl font-semibold text-foreground">Your Generated Reports</h2>
            <p className="text-muted-foreground max-w-2xl mx-auto">
              Access, download, and manage all your AI-generated reports. Download counts are updated in real-time.
            </p>
          </div>

          <Card className="shadow-xl border-2">
            <CardHeader className="bg-gradient-to-r from-muted/50 to-background border-b">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className="p-2 bg-primary/10 rounded-lg">
                    <FileText className="w-6 h-6 text-primary" />
                  </div>
                  <div>
                    <CardTitle className="text-xl">Generated Reports</CardTitle>
                    <p className="text-sm text-muted-foreground">
                      {reports?.length || 0} reports available for download
                    </p>
                  </div>
                </div>
              </div>
            </CardHeader>
            <CardContent className="p-0">
              {reportsLoading ? (
                <div className="p-6 space-y-4">
                  {[...Array(4)].map((_, i) => (
                    <div key={i} className="flex items-center justify-between p-6 border rounded-xl">
                      <div className="flex items-center gap-6">
                        <div className="w-12 h-12 bg-muted rounded-xl animate-pulse"></div>
                        <div className="space-y-3">
                          <div className="h-5 w-56 bg-muted rounded animate-pulse"></div>
                          <div className="h-4 w-40 bg-muted rounded animate-pulse"></div>
                        </div>
                      </div>
                      <div className="h-8 w-24 bg-muted rounded animate-pulse"></div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="divide-y divide-border">
                  {reports && reports.length > 0 ? (
                    reports.slice(0, 10).map((report) => (
                      <div key={report.id} className="p-6 hover:bg-muted/30 transition-colors group">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-6">
                            <div className="p-3 bg-gradient-to-br from-primary/10 to-primary/5 rounded-xl border border-primary/10">
                              <FileText className="w-8 h-8 text-primary" />
                            </div>
                            <div className="space-y-2">
                              <h4 className="font-bold text-lg text-foreground group-hover:text-primary transition-colors">{report.report_name}</h4>
                              <div className="flex items-center gap-4 text-sm text-muted-foreground">
                                <span className="font-medium text-primary">{report.report_categories?.title || 'Unknown Category'}</span>
                                <span>•</span>
                                <span>{formatDate(report.created_at)}</span>
                                {report.status === "completed" && (
                                  <>
                                    <span>•</span>
                                    <span className="text-green-600 dark:text-green-400 flex items-center gap-2 font-medium">
                                      <CheckCircle className="w-4 h-4" />
                                      {report.download_count || 0} downloads
                                    </span>
                                  </>
                                )}
                              </div>
                            </div>
                          </div>
                          <div className="flex items-center gap-4">
                            <div className="text-right space-y-1">
                              <Badge 
                                variant={report.status === "completed" ? "default" : "secondary"}
                                className="capitalize font-medium px-3 py-1"
                              >
                                {report.status}
                              </Badge>
                              <p className="text-xs text-muted-foreground">
                                {formatFileSize(report.file_size_bytes)}
                              </p>
                            </div>
                            {report.status === "completed" && (
                              <Button 
                                size="lg" 
                                variant="outline" 
                                className="flex items-center gap-3 shadow-lg hover:shadow-xl transition-all duration-200"
                                onClick={() => downloadReport(report)}
                              >
                                <Download className="w-4 h-4" />
                                Download
                              </Button>
                            )}
                          </div>
                        </div>
                      </div>
                    ))
                  ) : (
                    <div className="text-center py-16">
                      <div className="p-6 bg-muted/30 rounded-2xl max-w-md mx-auto">
                        <FileText className="w-16 h-16 mx-auto mb-6 text-muted-foreground/50" />
                        <h3 className="text-lg font-semibold text-foreground mb-2">No reports generated yet</h3>
                        <p className="text-sm text-muted-foreground mb-6">Generate your first AI-powered report to see it here</p>
                        <Button 
                          onClick={() => setActiveTab("generation")}
                          className="flex items-center gap-2"
                        >
                          <Download className="w-4 h-4" />
                          Generate First Report
                        </Button>
                      </div>
                    </div>
                  )}
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default Reports;
