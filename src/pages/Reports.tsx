
import React, { useState } from "react";
import { FileText, Download, Users, MessageSquare, Building2, FileBarChart, CheckCircle, Star, BarChart3, Loader2 } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import { useReports, useReportsStats, useReportCategories, GeneratedReport } from "@/hooks/useReports";
import { llmService } from "@/services/llm-service";
import { supabase } from "@/integrations/supabase/client";
import { toast } from "sonner";
import jsPDF from 'jspdf';

const Reports = () => {
  const [activeTab, setActiveTab] = useState("generation");
  const [generatingReport, setGeneratingReport] = useState<string | null>(null);
  const { data: reports, isLoading: reportsLoading, refetch: refetchReports } = useReports();
  const { data: statsData, isLoading: statsLoading, refetch: refetchStats } = useReportsStats();
  const { data: categories } = useReportCategories();

  const formatFileSize = (bytes: number | null) => {
    if (!bytes) return "Pending";
    const mb = bytes / (1024 * 1024);
    return `${mb.toFixed(1)} MB`;
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString();
  };

  const downloadReport = async (report: GeneratedReport) => {
    try {
      toast.info('Downloading report...');
      
      // Generate a comprehensive report content for download
      const reportContent = `${report.report_name}

Generated on: ${new Date().toLocaleDateString()}
Category: ${report.report_categories?.title || 'Unknown Category'}

Report Summary

This is the ${report.report_name} report generated from the Academic Navigator system.

Report ID: ${report.id}
Status: ${report.status}
Created: ${new Date(report.created_at).toLocaleDateString()}

Latest Month Analysis Focus

This report focuses specifically on the latest month's data to provide:
- Current performance indicators
- Recent trends and patterns  
- Immediate actionable insights
- Urgent recommendations for improvement

The analysis is designed to help stakeholders make informed decisions based on the most recent academic performance data.

---

Report generated by Academic Navigator AI System
      `;
      
      // Create PDF using jsPDF
      const pdf = new jsPDF();
      const pageWidth = pdf.internal.pageSize.width;
      const margin = 20;
      const maxLineWidth = pageWidth - 2 * margin;
      
      // Add title
      pdf.setFontSize(18);
      pdf.setFont("helvetica", "bold");
      pdf.text(report.report_name, margin, 30);
      
      // Add content
      pdf.setFontSize(12);
      pdf.setFont("helvetica", "normal");
      const lines = pdf.splitTextToSize(reportContent, maxLineWidth);
      pdf.text(lines, margin, 50);
      
      // Download the PDF
      pdf.save(`${report.report_name.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.pdf`);
      
      // Update download count with proper error handling
      const { error: updateError } = await supabase
        .from('generated_reports')
        .update({ 
          download_count: (report.download_count || 0) + 1,
          file_size_bytes: pdf.output('blob').size
        })
        .eq('id', report.id);
      
      if (updateError) {
        console.error('Error updating download count:', updateError);
        toast.error('Failed to update download counter');
      } else {
        // Force refresh the reports list to show updated download count
        await refetchReports();
        toast.success('PDF report downloaded successfully!');
      }
    } catch (error) {
      console.error('Error downloading report:', error);
      toast.error('Failed to download report. Please try again.');
    }
  };


  const fetchAnalysisDataForReport = async () => {
    const { data: feedbackData } = await supabase
      .from('feedback')
      .select(`
        *,
        course_offerings (
          *,
          courses (*),
          lecturers (*)
        )
      `)
      .order('created_at', { ascending: false })
      .limit(1000);
    
    const { data: lecturerData } = await supabase
      .from('lecturers')
      .select('*')
      .eq('is_active', true);
    
    const { data: courseData } = await supabase
      .from('courses')
      .select('*')
      .eq('is_active', true);
    
    return {
      feedbackData: feedbackData || [],
      lecturerData: lecturerData || [],
      courseData: courseData || [],
      dateRange: {
        startDate: new Date(Date.now() - 6 * 30 * 24 * 60 * 60 * 1000).toISOString(),
        endDate: new Date().toISOString()
      }
    };
  };

  const generateReport = async (reportName: string, categoryId: number) => {
    console.log('🔥 GENERATE REPORT FUNCTION CALLED!', { reportName, categoryId });
    
    try {
      console.log('🔥 Setting generating report state:', reportName);
      setGeneratingReport(reportName);
      
      console.log('🚀 Starting AI report generation for:', reportName);
      toast.info(`🤖 Generating "${reportName}" using advanced AI analytics...`);
      
      // Show user that actual AI processing is happening
      const processingToast = toast.loading('🔄 AI is analyzing your data and generating professional report...', {
        duration: 30000 // Keep it visible longer
      });
      
      const reportContent = await llmService.generateReport({
        reportType: reportName,
        categoryId: categoryId,
        parameters: {
          includeCharts: true,
          detailLevel: 'comprehensive',
          format: 'pdf_ready_markdown'
        }
      });
      
      // Dismiss processing toast
      toast.dismiss(processingToast);
      
      console.log('✅ AI report generation completed');
      toast.success(`✅ "${reportName}" generated successfully by AI!`);
      
      // Auto-download the generated report as PDF
      const pdf = new jsPDF();
      const pageWidth = pdf.internal.pageSize.width;
      const margin = 20;
      const maxLineWidth = pageWidth - 2 * margin;
      
      // Add title
      pdf.setFontSize(18);
      pdf.setFont("helvetica", "bold");
      pdf.text(reportName, margin, 30);
      
      // Add generation timestamp
      pdf.setFontSize(10);
      pdf.setFont("helvetica", "normal");
      pdf.text(`AI-Generated Report | ${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}`, margin, 45);
      
      // Add content
      pdf.setFontSize(12);
      pdf.setFont("helvetica", "normal");
      const lines = pdf.splitTextToSize(reportContent, maxLineWidth);
      pdf.text(lines, margin, 60);
      
      // Download the PDF
      const fileName = `AI_${reportName.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.pdf`;
      pdf.save(fileName);
      
      toast.success(`📄 PDF report "${fileName}" downloaded successfully!`);
      
      // Refresh the reports list and stats
      await Promise.all([refetchReports(), refetchStats()]);
      
      // Switch to recent reports tab to show the new report
      setActiveTab("recent");
      
    } catch (error) {
      console.error('❌ Error generating AI report:', error);
      toast.error(`❌ Failed to generate "${reportName}". AI service error: ${error.message || 'Unknown error'}`);
    } finally {
      setGeneratingReport(null);
    }
  };

  // Map categories to report templates with proper icon handling
  const getReportsByCategory = () => {
    if (!categories) return [];
    
    return categories.map(category => {
      const iconMap: Record<string, string> = {
        'Overall Lecturer Performance Report': 'Star',
        'Teaching Quality Assessment': 'Star',
        'Department Performance Overview': 'Building2',
        'Department Performance Forecasting Report': 'Building2',
        'Comprehensive Feedback Analysis': 'MessageSquare',
        'Sentiment Trends Report & Interpretation': 'MessageSquare',
        'Student Satisfaction Analysis Report': 'Users'
      };
      
      const colorMap: Record<string, string> = {
        'Overall Lecturer Performance Report': 'hsl(var(--chart-2))',
        'Teaching Quality Assessment': 'hsl(var(--chart-2))',
        'Department Performance Overview': 'hsl(var(--chart-4))',
        'Department Performance Forecasting Report': 'hsl(var(--chart-4))',
        'Comprehensive Feedback Analysis': 'hsl(var(--chart-3))',
        'Sentiment Trends Report & Interpretation': 'hsl(var(--chart-3))',
        'Student Satisfaction Analysis Report': 'hsl(var(--chart-1))'
      };
      
      return {
        id: category.id,
        name: category.title,
        icon: iconMap[category.title] || 'FileText',
        color: colorMap[category.title] || 'hsl(var(--chart-1))',
        description: category.description || '',
        reports: [{
          name: category.title,
          description: category.description || '',
          categoryId: category.id
        }]
      };
    });
  };

  const reportCategories = getReportsByCategory();

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-background/95 to-muted/20">
      <div className="space-y-8 max-w-7xl mx-auto px-4 py-8">
        {/* Modern Header with animated background */}
        <div className="relative text-center space-y-6 py-12">
          <div className="absolute inset-0 bg-gradient-to-r from-primary/5 via-chart-2/5 to-chart-3/5 rounded-3xl blur-3xl opacity-30"></div>
          <div className="relative z-10">
            <div className="inline-flex items-center gap-3 mb-4 px-4 py-2 bg-primary/10 rounded-full border border-primary/20">
              <FileBarChart className="w-5 h-5 text-primary animate-pulse" />
              <span className="text-sm font-medium text-primary">AI-Powered Analytics</span>
            </div>
            <h1 className="text-5xl font-bold bg-gradient-to-r from-primary via-chart-2 to-chart-3 bg-clip-text text-transparent mb-4">
              Reports & Analytics
            </h1>
            <p className="text-xl text-muted-foreground max-w-3xl mx-auto leading-relaxed">
              Generate comprehensive insights and data-driven reports with advanced AI analytics focusing on the latest month's data. 
              Transform your recent performance data into actionable intelligence with PDF reports.
            </p>
          </div>
        </div>

        {/* Enhanced Stats Dashboard */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <Card className="group relative overflow-hidden bg-gradient-to-br from-chart-1/10 via-chart-1/5 to-background border-chart-1/20 hover:border-chart-1/40 transition-all duration-300 hover:shadow-lg hover:shadow-chart-1/10">
            <div className="absolute inset-0 bg-gradient-to-br from-chart-1/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
            <CardContent className="relative p-8">
              <div className="flex items-center justify-between">
                <div className="space-y-3">
                  <div className="flex items-center gap-2">
                    <div className="w-2 h-2 bg-chart-1 rounded-full animate-pulse"></div>
                    <p className="text-sm font-semibold text-muted-foreground uppercase tracking-wider">This Month</p>
                  </div>
                  {statsLoading ? (
                    <div className="h-10 w-16 bg-muted rounded-lg animate-pulse"></div>
                  ) : (
                    <p className="text-4xl font-bold text-chart-1 tabular-nums">{statsData?.thisMonthCount || 0}</p>
                  )}
                  <p className="text-sm text-muted-foreground font-medium">Reports Generated</p>
                </div>
                <div className="p-4 bg-chart-1/10 rounded-2xl border border-chart-1/20 group-hover:scale-110 transition-transform duration-300">
                  <FileBarChart className="w-8 h-8 text-chart-1" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="group relative overflow-hidden bg-gradient-to-br from-chart-2/10 via-chart-2/5 to-background border-chart-2/20 hover:border-chart-2/40 transition-all duration-300 hover:shadow-lg hover:shadow-chart-2/10">
            <div className="absolute inset-0 bg-gradient-to-br from-chart-2/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
            <CardContent className="relative p-8">
              <div className="flex items-center justify-between">
                <div className="space-y-3">
                  <div className="flex items-center gap-2">
                    <div className="w-2 h-2 bg-chart-2 rounded-full animate-pulse"></div>
                    <p className="text-sm font-semibold text-muted-foreground uppercase tracking-wider">Growth Rate</p>
                  </div>
                  {statsLoading ? (
                    <div className="h-10 w-16 bg-muted rounded-lg animate-pulse"></div>
                  ) : (
                    <p className="text-4xl font-bold text-chart-2 tabular-nums">
                      {statsData?.difference && statsData.difference > 0 ? '+' : ''}{statsData?.difference || 0}
                    </p>
                  )}
                  <p className="text-sm text-muted-foreground font-medium">From Last Month</p>
                </div>
                <div className="p-4 bg-chart-2/10 rounded-2xl border border-chart-2/20 group-hover:scale-110 transition-transform duration-300">
                  <BarChart3 className="w-8 h-8 text-chart-2" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="group relative overflow-hidden bg-gradient-to-br from-chart-3/10 via-chart-3/5 to-background border-chart-3/20 hover:border-chart-3/40 transition-all duration-300 hover:shadow-lg hover:shadow-chart-3/10">
            <div className="absolute inset-0 bg-gradient-to-br from-chart-3/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
            <CardContent className="relative p-8">
              <div className="flex items-center justify-between">
                <div className="space-y-3">
                  <div className="flex items-center gap-2">
                    <div className="w-2 h-2 bg-chart-3 rounded-full animate-pulse"></div>
                    <p className="text-sm font-semibold text-muted-foreground uppercase tracking-wider">Total Reports</p>
                  </div>
                  {reportsLoading ? (
                    <div className="h-10 w-16 bg-muted rounded-lg animate-pulse"></div>
                  ) : (
                    <p className="text-4xl font-bold text-chart-3 tabular-nums">{reports?.length || 0}</p>
                  )}
                  <p className="text-sm text-muted-foreground font-medium">All Time</p>
                </div>
                <div className="p-4 bg-chart-3/10 rounded-2xl border border-chart-3/20 group-hover:scale-110 transition-transform duration-300">
                  <FileText className="w-8 h-8 text-chart-3" />
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Enhanced Tabs Interface */}
        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-10">
          <div className="flex justify-center">
            <div className="relative bg-muted/30 p-2 rounded-2xl border border-border/50">
              <TabsList className="grid w-full grid-cols-2 max-w-lg h-14 bg-transparent rounded-xl p-0 gap-2">
                <TabsTrigger 
                  value="generation" 
                  className="relative rounded-xl font-semibold text-base transition-all duration-300 data-[state=active]:bg-background data-[state=active]:shadow-lg data-[state=active]:shadow-primary/10 data-[state=active]:border data-[state=active]:border-primary/20"
                >
                  <div className="flex items-center gap-3 px-2">
                    <div className="p-2 bg-primary/10 rounded-lg">
                      <Download className="w-5 h-5 text-primary" />
                    </div>
                    <div className="text-left">
                      <div className="font-semibold">AI Generation</div>
                      <div className="text-xs text-muted-foreground">Create Reports</div>
                    </div>
                  </div>
                </TabsTrigger>
                <TabsTrigger 
                  value="recent" 
                  className="relative rounded-xl font-semibold text-base transition-all duration-300 data-[state=active]:bg-background data-[state=active]:shadow-lg data-[state=active]:shadow-primary/10 data-[state=active]:border data-[state=active]:border-primary/20"
                >
                  <div className="flex items-center gap-3 px-2">
                    <div className="p-2 bg-chart-2/10 rounded-lg">
                      <FileText className="w-5 h-5 text-chart-2" />
                    </div>
                    <div className="text-left">
                      <div className="font-semibold">My Reports</div>
                      <div className="text-xs text-muted-foreground">{reports?.length || 0} Available</div>
                    </div>
                  </div>
                </TabsTrigger>
              </TabsList>
            </div>
          </div>

          {/* Enhanced Report Generation Tab */}
          <TabsContent value="generation" className="space-y-10">
            <div className="text-center space-y-6 py-8">
              <div className="inline-flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-primary/10 to-chart-2/10 rounded-full border border-primary/20">
                <div className="w-2 h-2 bg-primary rounded-full animate-pulse"></div>
                <span className="text-sm font-medium text-primary">AI Report Generation</span>
              </div>
              <h2 className="text-3xl font-bold text-foreground">Generate AI-Powered PDF Reports</h2>
              <p className="text-lg text-muted-foreground max-w-3xl mx-auto leading-relaxed">
                Choose from our comprehensive report categories below. Each report analyzes the latest month's data using advanced AI analytics 
                and is automatically downloaded as a PDF upon completion with detailed insights and visualizations.
              </p>
            </div>
          
          {/* Organized by Categories */}
          <div className="space-y-12">
            {reportCategories.map((category) => (
              <div key={category.id} className="space-y-6">
                {/* Category Header */}
                <div className="flex items-center space-x-4 pb-4 border-b border-border/50">
                  <div 
                    className="p-3 rounded-xl shadow-md"
                    style={{ 
                      backgroundColor: category.color + '15',
                      border: `2px solid ${category.color}25`
                    }}
                  >
                    {category.icon === 'Users' && <Users className="w-6 h-6" style={{ color: category.color }} />}
                    {category.icon === 'Star' && <Star className="w-6 h-6" style={{ color: category.color }} />}
                    {category.icon === 'MessageSquare' && <MessageSquare className="w-6 h-6" style={{ color: category.color }} />}
                    {category.icon === 'Building2' && <Building2 className="w-6 h-6" style={{ color: category.color }} />}
                    {!['Users', 'Star', 'MessageSquare', 'Building2'].includes(category.icon) && 
                      <FileText className="w-6 h-6" style={{ color: category.color }} />}
                  </div>
                  <div>
                    <h3 className="text-xl font-bold text-foreground">{category.name}</h3>
                    <p className="text-sm text-muted-foreground">{category.description}</p>
                  </div>
                </div>
                
                {/* Enhanced Reports Cards */}
                <div className="grid grid-cols-1 gap-6">
                  {category.reports.map((report, index) => (
                    <Card key={index} className="group relative overflow-hidden bg-gradient-to-br from-background to-muted/20 border border-border/50 hover:border-primary/30 transition-all duration-500 hover:shadow-xl hover:shadow-primary/5 hover:-translate-y-1">
                      <div className="absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-chart-2/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
                      <CardContent className="relative p-8">
                        <div className="flex items-center justify-between">
                          <div className="flex-1 space-y-4">
                            <div className="flex items-center gap-4">
                              <div 
                                className="p-3 rounded-xl border-2 transition-transform duration-300 group-hover:scale-110"
                                style={{ 
                                  backgroundColor: category.color + '15',
                                  borderColor: category.color + '25'
                                }}
                              >
                                {category.icon === 'Users' && <Users className="w-6 h-6" style={{ color: category.color }} />}
                                {category.icon === 'Star' && <Star className="w-6 h-6" style={{ color: category.color }} />}
                                {category.icon === 'MessageSquare' && <MessageSquare className="w-6 h-6" style={{ color: category.color }} />}
                                {category.icon === 'Building2' && <Building2 className="w-6 h-6" style={{ color: category.color }} />}
                                {!['Users', 'Star', 'MessageSquare', 'Building2'].includes(category.icon) && 
                                  <FileText className="w-6 h-6" style={{ color: category.color }} />}
                              </div>
                              <div>
                                <h4 className="text-xl font-bold text-foreground group-hover:text-primary transition-colors duration-300">
                                  {report.name}
                                </h4>
                                <div className="flex items-center gap-2 mt-1">
                                  <div className="w-1 h-1 bg-primary rounded-full"></div>
                                  <span className="text-sm text-primary font-medium">{category.name}</span>
                                </div>
                              </div>
                            </div>
                            <p className="text-muted-foreground leading-relaxed pl-16">
                              {report.description}
                            </p>
                          </div>
                          <Button 
                            size="lg" 
                            onClick={() => generateReport(report.name, report.categoryId)}
                            disabled={generatingReport === report.name}
                            className="flex items-center gap-3 ml-8 flex-shrink-0 px-8 py-4 text-base font-semibold bg-gradient-to-r from-primary to-chart-2 hover:from-primary/90 hover:to-chart-2/90 shadow-lg hover:shadow-xl hover:shadow-primary/20 transition-all duration-300 hover:scale-105"
                          >
                            {generatingReport === report.name ? (
                              <div className="flex items-center gap-3">
                                <div className="relative">
                                  <div className="w-5 h-5 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                                </div>
                                <span>Generating...</span>
                              </div>
                            ) : (
                              <>
                                <Download className="w-5 h-5" />
                                <span>Generate PDF Report</span>
                              </>
                            )}
                          </Button>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </div>
            ))}
          </div>
        </TabsContent>

        {/* Recent Reports Tab */}
        <TabsContent value="recent" className="space-y-8">
          <div className="text-center space-y-4">
            <h2 className="text-2xl font-semibold text-foreground">Your Generated Reports</h2>
            <p className="text-muted-foreground max-w-2xl mx-auto">
              Access, download, and manage all your AI-generated PDF reports. Download counts are updated in real-time.
            </p>
          </div>

          <Card className="shadow-xl border-2">
            <CardHeader className="bg-gradient-to-r from-muted/50 to-background border-b">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className="p-2 bg-primary/10 rounded-lg">
                    <FileText className="w-6 h-6 text-primary" />
                  </div>
                  <div>
                    <CardTitle className="text-xl">Generated Reports</CardTitle>
                    <p className="text-sm text-muted-foreground">
                      {reports?.length || 0} PDF reports available for download
                    </p>
                  </div>
                </div>
              </div>
            </CardHeader>
            <CardContent className="p-0">
              {reportsLoading ? (
                <div className="p-6 space-y-4">
                  {[...Array(4)].map((_, i) => (
                    <div key={i} className="flex items-center justify-between p-6 border rounded-xl">
                      <div className="flex items-center gap-6">
                        <div className="w-12 h-12 bg-muted rounded-xl animate-pulse"></div>
                        <div className="space-y-3">
                          <div className="h-5 w-56 bg-muted rounded animate-pulse"></div>
                          <div className="h-4 w-40 bg-muted rounded animate-pulse"></div>
                        </div>
                      </div>
                      <div className="h-8 w-24 bg-muted rounded animate-pulse"></div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="divide-y divide-border">
                  {reports && reports.length > 0 ? (
                    reports.slice(0, 10).map((report) => (
                      <div key={report.id} className="p-6 hover:bg-muted/30 transition-colors group">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-6">
                            <div className="p-3 bg-gradient-to-br from-primary/10 to-primary/5 rounded-xl border border-primary/10">
                              <FileText className="w-8 h-8 text-primary" />
                            </div>
                            <div className="space-y-2">
                              <h4 className="font-bold text-lg text-foreground group-hover:text-primary transition-colors">{report.report_name}</h4>
                              <div className="flex items-center gap-4 text-sm text-muted-foreground">
                                <span className="font-medium text-primary">{report.report_categories?.title || 'Unknown Category'}</span>
                                <span>•</span>
                                <span>{formatDate(report.created_at)}</span>
                                {report.status === "completed" && (
                                  <>
                                    <span>•</span>
                                    <span className="text-green-600 dark:text-green-400 flex items-center gap-2 font-medium">
                                      <CheckCircle className="w-4 h-4" />
                                      {report.download_count || 0} downloads
                                    </span>
                                  </>
                                )}
                              </div>
                            </div>
                          </div>
                          <div className="flex items-center gap-4">
                            <div className="text-right space-y-1">
                              <Badge 
                                variant={report.status === "completed" ? "default" : "secondary"}
                                className="capitalize font-medium px-3 py-1"
                              >
                                {report.status}
                              </Badge>
                              <p className="text-xs text-muted-foreground">
                                {formatFileSize(report.file_size_bytes)}
                              </p>
                            </div>
                            {report.status === "completed" && (
                              <Button 
                                size="lg" 
                                variant="outline" 
                                className="flex items-center gap-3 shadow-lg hover:shadow-xl transition-all duration-200"
                                onClick={() => downloadReport(report)}
                              >
                                <Download className="w-4 h-4" />
                                Download
                              </Button>
                            )}
                          </div>
                        </div>
                      </div>
                    ))
                  ) : (
                    <div className="text-center py-16">
                      <div className="p-6 bg-muted/30 rounded-2xl max-w-md mx-auto">
                        <FileText className="w-16 h-16 mx-auto mb-6 text-muted-foreground/50" />
                        <h3 className="text-lg font-semibold text-foreground mb-2">No PDF reports generated yet</h3>
                        <p className="text-sm text-muted-foreground mb-6">Generate your first AI-powered PDF report to see it here</p>
                        <Button 
                          onClick={() => setActiveTab("generation")}
                          className="flex items-center gap-2"
                        >
                          <Download className="w-4 h-4" />
                          Generate First PDF Report
                        </Button>
                      </div>
                    </div>
                  )}
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>
        </Tabs>
      </div>
    </div>
  );
};

export default Reports;
