import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.50.3';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface AIInsightRequest {
  type: 'feedback_analysis' | 'course_evaluation' | 'lecturer_performance' | 'report_generation';
  data: any;
  customPrompt?: string;
}

interface OpenAIResponse {
  choices: Array<{
    message: {
      content: string;
    };
  }>;
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
    console.log('Checking OpenAI API Key availability:', !!openAIApiKey);
    
    if (!openAIApiKey) {
      console.error('OPENAI_API_KEY not found in environment variables');
      return new Response(
        JSON.stringify({ 
          error: 'AI service not configured',
          details: 'OPENAI_API_KEY environment variable not found'
        }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const { type, data, customPrompt }: AIInsightRequest = await req.json();
    console.log(`Processing AI insight request: ${type}`);

    // Initialize Supabase client for data fetching
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const supabase = createClient(supabaseUrl, supabaseServiceKey);

    // Generate appropriate prompt based on request type
    const prompt = await generatePrompt(type, data, customPrompt, supabase);
    
    // Call OpenAI API
    const openAIResponse = await fetch(
      'https://api.openai.com/v1/chat/completions',
      {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${openAIApiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'gpt-4o',
          messages: [
            {
              role: 'system',
              content: 'You are an expert educational data analyst. Provide structured, actionable insights based on the data provided.'
            },
            {
              role: 'user',
              content: prompt
            }
          ],
          temperature: 0.7,
          max_tokens: 2048,
        }),
      }
    );

    if (!openAIResponse.ok) {
      const errorText = await openAIResponse.text();
      console.error('OpenAI API error:', errorText);
      throw new Error(`OpenAI API error: ${openAIResponse.status}`);
    }

    const openAIData: OpenAIResponse = await openAIResponse.json();
    const aiContent = openAIData.choices?.[0]?.message?.content || '';

    if (!aiContent) {
      throw new Error('No content generated by AI');
    }

    // Log the interaction for debugging
    console.log(`AI insight generated for ${type}:`, aiContent.substring(0, 200) + '...');

    // Parse AI response based on type
    const structuredResponse = parseAIResponse(type, aiContent);

    return new Response(
      JSON.stringify({ 
        success: true, 
        insights: structuredResponse,
        rawContent: aiContent 
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('Error in AI insights function:', error);
    return new Response(
      JSON.stringify({ 
        error: 'Failed to generate AI insights',
        details: error.message 
      }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }
});

async function generatePrompt(
  type: string, 
  data: any, 
  customPrompt: string | undefined,
  supabase: any
): Promise<string> {
  let basePrompt = '';
  let contextData = '';

  switch (type) {
    case 'feedback_analysis':
      basePrompt = `Analyze the following student feedback data and provide structured insights:

INSTRUCTIONS:
- Identify key strengths, weaknesses, and improvement opportunities
- Analyze sentiment patterns and trends
- Provide specific, actionable recommendations
- Focus on educational quality and student satisfaction

Format your response as:
STRENGTHS:
- [3-5 key strengths]

WEAKNESSES:
- [3-5 key weaknesses]

IMPROVEMENTS:
- [3-5 specific improvement suggestions]

SENTIMENT_ANALYSIS:
- Overall sentiment: [positive/neutral/negative]
- Key themes: [list main themes]
`;
      contextData = `FEEDBACK DATA:\n${JSON.stringify(data, null, 2)}`;
      break;

    case 'course_evaluation':
      basePrompt = `Analyze the following course evaluation data and provide educational insights:

INSTRUCTIONS:
- Evaluate teaching effectiveness, content quality, and student engagement
- Compare performance metrics across different aspects
- Identify trends and patterns in student responses
- Suggest specific improvements for course delivery

Format your response as:
STRENGTHS:
- [3-5 key course strengths]

WEAKNESSES:
- [3-5 areas needing improvement]

IMPROVEMENTS:
- [3-5 specific recommendations for course enhancement]
`;
      contextData = `COURSE DATA:\n${JSON.stringify(data, null, 2)}`;
      break;

    case 'lecturer_performance':
      basePrompt = `Analyze lecturer performance data and provide professional development insights:

INSTRUCTIONS:
- Evaluate teaching effectiveness and student engagement
- Identify professional strengths and development areas
- Provide constructive feedback and improvement strategies
- Focus on evidence-based recommendations

Format your response as:
STRENGTHS:
- [3-5 key performance strengths]

WEAKNESSES:
- [3-5 development areas]

IMPROVEMENTS:
- [3-5 professional development recommendations]
`;
      contextData = `LECTURER DATA:\n${JSON.stringify(data, null, 2)}`;
      break;

    case 'report_generation':
      basePrompt = `Generate a comprehensive educational analytics report based on the provided data:

INSTRUCTIONS:
- Provide executive summary with key findings
- Analyze trends and patterns in the data
- Include statistical insights and comparisons
- Offer strategic recommendations for improvement
- Use professional academic language
- Create a detailed report with clear sections and actionable insights

Generate a comprehensive markdown report that can be converted to PDF.
`;
      contextData = `REPORT DATA:\n${JSON.stringify(data, null, 2)}`;
      break;

    default:
      basePrompt = 'Analyze the provided educational data and provide insights.';
      contextData = JSON.stringify(data, null, 2);
  }

  if (customPrompt) {
    basePrompt += `\n\nADDITIONAL INSTRUCTIONS: ${customPrompt}`;
  }

  return `${basePrompt}\n\n${contextData}`;
}

function parseAIResponse(type: string, content: string): any {
  try {
    // Extract structured sections from AI response
    const strengthsMatch = content.match(/STRENGTHS:\s*((?:[-•]\s*.*(?:\n|$))*)/i);
    const weaknessesMatch = content.match(/WEAKNESSES:\s*((?:[-•]\s*.*(?:\n|$))*)/i);
    const improvementsMatch = content.match(/IMPROVEMENTS:\s*((?:[-•]\s*.*(?:\n|$))*)/i);

    const parseList = (text: string | null): string[] => {
      if (!text) return [];
      return text
        .split('\n')
        .filter(line => line.trim().startsWith('-') || line.trim().startsWith('•'))
        .map(line => line.replace(/^[-•]\s*/, '').trim())
        .filter(line => line.length > 0);
    };

    const structured = {
      strengths: parseList(strengthsMatch?.[1] || ''),
      weaknesses: parseList(weaknessesMatch?.[1] || ''),
      improvements: parseList(improvementsMatch?.[1] || ''),
      summary: content.split('STRENGTHS:')[0]?.trim() || content.substring(0, 200),
      fullContent: content
    };

    // Add type-specific parsing
    if (type === 'feedback_analysis') {
      const sentimentMatch = content.match(/SENTIMENT_ANALYSIS:\s*(.*?)(?=\n\n|\n[A-Z]|$)/is);
      if (sentimentMatch) {
        structured.sentimentAnalysis = sentimentMatch[1].trim();
      }
    }

    return structured;
  } catch (error) {
    console.error('Error parsing AI response:', error);
    return {
      strengths: ['AI analysis completed'],
      weaknesses: ['Further analysis needed'],
      improvements: ['Review feedback patterns'],
      summary: content.substring(0, 200),
      fullContent: content
    };
  }
}